/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 1 2 3 4>;
            flavor = "balanced";
        };

        hml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 55>;
        };

        sr_lh_1: sr_lh_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_1";
            bindings = <&kp LS(TILDE)>, <&kp LS(EQUAL)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_lh_2: sr_lh_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_2";
            bindings = <&kp N1>, <&kp LS(N1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_lh_3: sr_lh_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_3";
            bindings = <&kp N2>, <&kp LS(LEFT_BRACKET)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_lh_4: sr_lh_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_4";
            bindings = <&kp N3>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_lh_5: sr_lh_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_5";
            bindings = <&kp N4>, <&kp LS(N9)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_lh_6: sr_lh_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_LH_6";
            bindings = <&kp N5>, <&kp LS(N5)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_lh_t2: key_lh_t2 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_LH_T2";
            bindings = <&kp LS(N3)>, <&kp LG(LS(N4))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_rh_1: sr_rh_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_RH_1";
            bindings = <&kp N6>, <&kp RS(N7)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_rh_2: sr_rh_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_RH_2";
            bindings = <&kp N7>, <&kp RS(N0)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_rh_3: sr_rh_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_RH_3";
            bindings = <&kp N8>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_rh_4: sr_rh_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_RH_4";
            bindings = <&kp N9>, <&kp RS(RIGHT_BRACKET)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sr_rh_5: sr_rh_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_ROW_RH_5";
            bindings = <&kp N0>, <&kp RS(N8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_t2: key_rh_t2 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_T2";
            bindings = <&kp LS(N6)>, <&kp LG(LS(N5))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <38 41>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <49 50>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <47 48>;
        };

        combo_select_all {
            bindings = <&kp LG(A)>;
            key-positions = <47 50>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <48 50>;
        };

        combo_redo {
            bindings = <&kp LS(LG(Z))>;
            key-positions = <47 49>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT                                                                                                                               &kp C_MUTE          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp LS(LG(NUMBER_4))         &kp LS(LG(NUMBER_5))
&sr_lh_1              &sr_lh_2              &sr_lh_3         &sr_lh_4          &sr_lh_5           &sr_lh_6                                                                                                    &sr_rh_1  &sr_rh_2            &sr_rh_3           &sr_rh_4         &sr_rh_5                     &kp MINUS
&kp LS(N2)            &kp Q                 &kp W            &kp E             &kp R              &kp T                                                                                                       &kp Y     &kp U               &kp I              &kp O            &kp P                        &kp BSLH
&kp ESC               &hml LEFT_CONTROL A   &hml LEFT_ALT S  &hml LEFT_GUI D   &hml LEFT_SHIFT F  &kp G                                                                                                       &kp H     &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K   &hmr LEFT_ALT L  &hmr LEFT_CONTROL SEMICOLON  &kp SQT
&kp LEFT_SHIFT        &kp Z                 &kp X            &kp C             &kp V              &kp B     &kp GRAVE     &key_lh_t2  &hml LEFT_GUI SPACE  &hmr RIGHT_GUI LS(N4)  &kp EQUAL      &key_rh_t2   &kp N     &kp M               &kp COMMA          &kp DOT          &kp FSLH                     &kp RIGHT_SHIFT
&magic MAGIC 0        &kp END               &kp PAGE_UP      &kp PAGE_DOWN     &kp HOME                     &lt 1 RETURN  &kp TAB     &kp BACKSPACE        &kp RETURN             &kp BACKSPACE  &lt 1 SPACE            &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT                    &magic 2 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP     &kp C_PREV    &kp C_NEXT    &kp C_PP                                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &kp KP_MULTIPLY  &kp KP_SLASH  &kp KP_EQUAL  &kp KP_NUM  &kp LEFT_PARENTHESIS                                                        &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &kp KP_MINUS     &kp KP_N9     &kp KP_N8     &kp KP_N7   &kp RIGHT_PARENTHESIS                                                       &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &kp KP_PLUS      &kp KP_N6     &kp KP_N5     &kp KP_N4   &kp PERCENT                                                                 &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp KP_ENTER     &kp KP_N3     &kp KP_N2     &kp KP_N1   &trans                 &trans  &trans  &to DEFAULT  &trans  &trans  &trans  &trans     &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp COLON        &kp KP_DOT    &kp KP_N0     &kp COMMA                          &trans  &trans  &trans       &trans  &trans  &trans             &kp COMMA   &kp KP_N0     &kp KP_DOT     &kp COLON        &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
